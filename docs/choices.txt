###
DBRresenter maps the database file. It is singleton, because I need only one file exemplar of base.

###
DBPresenter can contain only Intereg.MAX_VALUE of DBRecords, 
because I use ArrayList structure for storing records.
I decided that 2^31-1 of rows should be sufficient for realization.

###
Create, update, delete will trigger overwriting of the db file. 
Maybe it is not best realization but performance was not a part of requirements.

###
For logging I used log4j (version 1.2.17) because it is simple, 
popular and rather fast, but it was removed in the end of developing due to 
"The final program must have no dependencies on any libraries other than those of the Java 2 Platform".

###
The source code was divided into packets:
suncertify.constants - contains classes that contains constants.
suncertify.db - contains classes that communicates between database and application
suncertify.gui - user interface based on Swing
suncertify.parser - read/write into database file
suncertify.program - main entry point to launch the application
suncertify.socket - contains helper classes that is used by client and server
suncertify.socket.client - client implementation 
suncertify.socket.server - server implementation

###
Packages for javadoc was described by package.html files.

###
All of public methods, variables, constructors was commented for javadoc.

###
The client-server is implemented by sockets because I think it is easier and better as RMI.

###
By Ant (version 1.8.2) was:
1. builded project.
2. generated javadoc.
3. created runme.jar

###
The records stored in CopyOnWriteArrayList. It prevents ConcurrentModificationException. 

###
For text fields limitation in gui was created class BSPlainDocument that extends PlainDocument class.
The constructor of BSPlainDocument takes the maximum chars length for text field.
